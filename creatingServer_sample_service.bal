import ballerina/grpc;

listener grpc:Listener ep = new (9090);

map<functions> server = [];

@grpc:ServiceDescriptor {descriptor: ROOT_DESCRIPTOR, descMap: getDescriptorMap()}
service "creatingServer" on ep {

    remote function add_new_fn(grpc: Caller caller, functions value) returns string|error {
        server[value.funcName] = <@untainted>value;

        io:println("Add function: " + funcName);

        string payload = "Function added: " + value.funcName;
        error? result = caller->send(payload);
        result = caller->complete();

        if (result is error){
            error simpleError = error("SimpleErrorType", message = "Failed to connect");
        }
    }
    resource function add_fns(grpc: Caller caller, functions value) returns string|error {

        server.push(value);


         
        result = caller->complete();

        return "Function created: " + (value.funcName);

        if (result is error) {
            io:println("Error while connecting: " + result.reason());
            
        }
    }
 remote function delete_fn(grpc: Caller caller, functions value) returns string|error {
       

        if (server.hasKey(value)) {
            boolean black = server.hasKey(value);

            string payload = "Function deleted";

            error? result = caller->send(payload);
            result = caller->complete();

        }else{
            payload = "This function: " + value + " does not exist";
            return error(FUNCTION_NOT_FOUND, funcName = FuncName);
        }
    }
    remote function show_fn(grpc: Caller caller, functions value) returns function|error {
        server.forEach(function (Funcs retrieved)){
            
            if (retrieved.funcName == value.funcName) {
                    
                    result = caller->send("******Reord found ******\nFunction name: " 
                    + retrived.funcName + 
                    "\nFullname: "+ retrived.fullname + 
                    "\nEmail: "+retrieved.email + 
                    "\nAddress: " + retrieved.address + 
                    "\nLanguage: " + retrieved.language + 
                    "\nVersion: " + retrived.version);  
                    
            }
            var result = pr.close();
            if(result is error){
                log:printError("Error occured", err = result);
            }
        }
    }
    remote function show_all_fns(grpc: Caller caller, functions value) returns stream<string, error?>|error {

        error? result = caller->send("********Functions*********");


        server.forEach(function(Funcs retrived){
            
            result = caller->send("Function name:  " + restrived.funcName + 
                    "\nFullname: "+retrieved.fullname + 
                    "\nEmail: "+retrieved.email + 
                    "\nAddress: "+retrieved.address + 
                    "\nLanguage: "+retrieved.language + 
                    "\nVersion: "+retrieved.versionNum.toString());)
            }
        });
        result = caller->complete();
    }
    remote function show_all_with_criteria(grpc: Caller caller, functions value) returns stream<string, error?>|error {
        io:println("*********CHecking for all**********");

    }
}

public type criteria record{|
    string functionName = "";
    string version = "";
|};

public type addRequest record{|
    string functionName = "";
    int version = 0;
    string fullname = "";
    string email = "";
    string address = "";
    string langaue = "";
|};

const string
function getDescriptorMap() returns map<string> {
    return {
        "streaming_buffer.proto
        "google/protobuf/wrappers.proto
        
    };
}
