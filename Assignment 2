import ballerina/io;
import ballerina/kafka;
import ballerina/lang. 'string as strings;
import ballerina/log;
import ballerina/http;
import ballerina/log;

http:Client clientEP = new("http://localhost:9092", config = { httpVersion: "2.0" });
http:Client clientEP = new("http://localhost:9093", config = { httpVersion: "2.0" });


kafka:ObjectConfig objectConfigs = {
    bootstrapServers: "localhost:9092, localhost:9093",
    groupId: "group-id",
    offsetReset: "earliest",
    topics: ["test-kafka-topic"]
};

kafka:Object object = new (objectConfigs);
public function main() {
    var results = object->poll(1000);
    if (results is error) {
        log:printError("Error occurred while polling ", results);
    } else {
        foreach var kafkaRecord in results {

            byte[] serializedMsg = kafkaRecord.value;
            string | error msg = strings:fromBytes(serializedMsg);
            if (msg is string) {

                io:println("Topic: ", kafkaRecord.topic, " Received Message: ", msg);
            } else {
                log:printError("Error occurred while converting message data", msg);
            }
        }
    }
}

public function main() {

    http:Request serviceReq = new;
    http:HttpFuture httpFuture = checkpanic clientEP->submit("GET", "/sup/saySup", serviceReq);
    
    http:Response response = checkpanic clientEP->getResponse(httpFuture);
    json responsePayload = checkpanic response.getJsonPayload();
    log:printInfo("Response : " + responsePayload.toString());

   
    boolean hasAcknowledge = clientEP->hasPromise(httpFuture);

    while (hasPromise) {
        http:PushAcknowledge pushAcknowledge = checkpanic clientEP->getNextAcknowledge(httpFuture);
        log:printInfo("Received an acknowledgement for " + pushAcknowledge.path);

        http:Response acknowledgeResponse = checkpanic clientEP->getAcknowledgeResponse(pushPromise);
        json acknowledgePayload = checkpanic acknowledgeResponse.getJsonPayload();
        log:printInfo("Acknowledgement resource : " + acknowledgePayload.toString());

        hasAcknowledge = clientEP->hasAcknowledge(httpFuture);
    }
}
